// VOSS AUTOGENERATED FILE, DO NOT MODIFY.
import * as voss from 'voss/runtime';

type HASH16 = string;
type HASH20 = string;

<% for object in objects %>
<% #object object=object %>

<% /for %>

<% for oneof in enums %>
<% #oneof oneof=oneof %>
<% /for %>

export namespace RPC {
<% for message in rpc.getCases() %>
  <% #rpcObject object=message.type.asObject() %>
<% /for %>

  <% #oneof oneof=rpc %>

  export class VossSession extends voss.VossSessionBase<RPCMessage> {
    protected hostID?: number;
    protected objects = new Map<string, voss.ObjectBase<any, VossSession>>();
    protected deserializeMap = RPCMessage$DeserializerMap;
    readonly loaded = voss.createResolvable<null>();

    async fetchObjectByUUID(uuid: string): Promise<any> {
      if (this.objects.has(uuid)) {
        return this.objects.get(uuid);
      }

      await this.sendRequest((replyId) => ({
          type: RPCMessage$Type.FetchByUUID,
          value: new FetchByUUIDMessage({ replyId, uuid }),
      }));

      return this.objects.get(uuid);
    }

    protected createClockRequest(timestamp: number): RPCMessage {
      return {
        type: RPCMessage$Type.Clock,
        value: new ClockMessage({ timestamp }),
      };
    }

    protected getHostId(): number {
      if (this.hostID === undefined) throw new Error('Host ID is not yet initialized.');
      return this.hostID;
    }

    protected CAS(uuid: string, field: string, current: any, next: any): void {
      const object = this.objects.get(uuid);
      if (!object) return;
      if (object.CAS(this, field, current, next)) return;
      // Conflict.
      throw new Error('Cannot handle conflict.');
    }

    protected onMessage(message: RPCMessage): void {
      switch (message.type) {
        case RPCMessage$Type.Reply:
          this.receivedReply(message.value.data.replyId);
          break;
        case RPCMessage$Type.Clock:
          this.receivedTime(message.value.data.timestamp);
          break;
        case RPCMessage$Type.HostID:
          this.hostID = message.value.data.value;
          this.loaded.resolve();
          break;
      }
    }
  }
}
