// THIS FILE WAS GENERATED BY VOSS, DO NOT MODIFY.
export type UUID = string;
import { IChangeNotifier, EnumCase, LazyReference } from './runtime';

export class A {
  constructor(
    private readonly session$: Session,
  ) {}
}

export class RPC$ClockData {
  constructor(
    private readonly session$: Session,
    readonly timestamp: number,
  ) {}
}

export class T extends IChangeNotifier {
  constructor(
    private readonly session$: Session,
    readonly uuid$: UUID,
  ) { super(); }
}

export class Session {
  private objects = new Map<UUID, any>();
  constructor() {}

  async fetchObjectByUUID(uuid: UUID): LazyReference<any> {
    // TODO(qti3e) Send a request to server.
    return this.objects.get(uuid);
  }

  createT() {
  }

  async fetchTS() {
  }
}

export const enum RPCMessage$Type {
  clock = 1,
}

export type RPCMessage =
  | EnumCase<RPCMessage$Type.clock, RPC$ClockData>;