// VOSS AUTOGENERATED FILE, DO NOT MODIFY.
import * as voss from './runtime';

type HASH16 = string;
type HASH20 = string;

<!-- ****************************** OBJECTS ****************************** -->
<container *for="let object in objects">
  <!-- The $Data interface -->
  <interface [name]="object.pascalCase + '$Data'">
    <interface-member
      *for="let field in object.getFields | call"
      [name]="field.camelCase"
      [type]="field.type | type" />
  </interface>

  <!-- ****************************** ROOT OBJECTS ****************************** -->
  <class
    *if="object.isRoot"
    [name]="object.pascalCase"
    [extend]="object.pascalCase | objectBase"
    implement="voss.Struct"
    exported>

    constructor(protected data: {{ object.pascalCase }}$Data) {
      super();
    }

    <!-- View Containers (for viewed objects) -->
    <container *for="let field in object.getFields | call" *if="field.isViewed">
      <property
        [name]="field.camelCase + 'View'"
        [default]="field | fieldViewMap"
        static readonly />
      
      <method [name]="'get' + field.pascalCase + 'ViewFor'" static>
        <parameter name="session" type="RPC.VossSession" />
        <parameter name="object" type="HASH16" />
        const views = voss.getOrInsert({{object.pascalCase}}.{{field.camelCase}}View, session, () => new Map());
        return voss.getOrInsert(views, object, () => new voss.View(async () => {
          await session.sendRequest((replyId: number) => ({
            type: RPC.RPCMessage$Type.{{field.rpcGetFetchViewCase | call}},
            value: new RPC.{{field.rpcGetFetchViewMsg | call}}({
              replyId,
              host: object
            })
          }))
        }));
      </method>
    </container>

    <!-- View Accessors -->
    <container *for="let view in object.getViews | call">
      <method [name]="'view' + view.pascalCase" [type]="'voss.ReadonlyView<' + view.target.pascalCase + '>'">
        <parameter name="session" type="RPC.VossSession" />
        return {{ view.target.pascalCase }}.get{{view.via.pascalCase}}ViewFor(session, this.getUuid());
      </method>
    </container>

    <!-- View init -->
    <method name="init">
      <parameter name="session" type="RPC.VossSession" />
      <container *for="let field in object.getFields | call" *if="field.isViewed">
        {{object.pascalCase}}.get{{field.pascalCase}}ViewFor(session, this.data.{{field.camelCase}}).add(this);
      </container>
    </method>

    <method name="updated">
      <parameter name="session" type="RPC.VossSession" />
      <parameter name="key" />
      <parameter name="prev" />
      switch (key) {
        <container *for="let field in object.getFields | call" *if="field.isViewed">
          case "{{field.camelCase}}":
            {{object.pascalCase}}.get{{field.pascalCase}}ViewFor(session, prev).remove(this);
            {{object.pascalCase}}.get{{field.pascalCase}}ViewFor(session, this.data.{{field.camelCase}}).add(this);
            break;
        </container>
      }
    </method>

    <!-- Getter/Setters -->
    <container *for="let field in object.getFields | call">
      <render template="object-getter" />

      <!-- Setter -->
      <method
        *if="field.name != 'uuid'"
        [name]="'set' + field.pascalCase">
        <parameter name="session" type="RPC.VossSession" />
        <parameter name="value" [type]="field | fieldSetterType" />
        const current = this.data.{{field.camelCase}};
        const next = this.data.{{field.camelCase}} = {{ field | fieldSetterValue }};
        this.emitChange();
        return session.sendRequest((replyId, timestamp) => ({
            type: RPC.RPCMessage$Type.{{field.rpcGetSetCase | call}},
            value: new RPC.{{field.rpcGetSetMsg | call}}({
              replyId,
              timestamp,
              target: this.data.uuid,
              current, next
            })
        }));
      </method>
    </container>

    <render template="object-base" />
  </class>

  <!-- ****************************** SREUCTURE ****************************** -->
  <render template="object-struct" *if="object.isRoot != true" />
</container>

<!-- ****************************** ENUMS ****************************** -->
<render *for="let enum in enums" template="voss-enum" />

<!-- ****************************** RPC ****************************** -->
export namespace RPC {
<with-indent value="1">

  <container *for="let message in rpc.getCases | call">
    <bind name="object" [value]="message.type.asObject | call" />

    <!-- The $Data interface -->
    <interface [name]="object.pascalCase + '$Data'">
      <interface-member
        *for="let field in object.getFields | call"
        [name]="field.camelCase"
        [type]="field.type | type"
        readonly />
    </interface>

    <class
      [name]="object.pascalCase"
      implement="voss.Struct"
      exported>
      constructor(readonly data: {{ object.pascalCase }}$Data) {}
      <render template="object-base" />
    </class>
  </container>

  <container>
    <bind name="enum" [value]="rpc" />
    <render template="voss-enum" />
  </container>

</with-indent>
}
