// VOSS AUTOGENERATED FILE, DO NOT MODIFY.
import * as voss from './runtime';

type HASH16 = string;
type HASH20 = string;

<!-- ****************************** OBJECTS ****************************** -->
<container *for="let object in objects">
  <!-- The $Data interface -->
  <interface [name]="object.pascalCase + '$Data'">
    <interface-member
      *for="let field in object.getFields | call"
      [name]="field.camelCase"
      [type]="field.type | type" />
  </interface>

  <!-- The class for the root objects -->
  <class
    *if="object.isRoot"
    [name]="object.pascalCase"
    [extend]="object.pascalCase | objectBase"
    implement="voss.Struct"
    exported>

    constructor(protected data: {{ object.pascalCase }}$Data) {
      super();
    }

    <!-- Getter/Setters -->
    <container *for="let field in object.getFields | call">
      <render template="object-getter" />

      <!-- Setter -->
      <method
        [name]="'set' + field.pascalCase">
        <parameter name="session" type="RPC.VossSession" />
        <parameter name="value" [type]="field | fieldSetterType" />
        this.data.{{field.camelCase}} = value;
        this.emitChange();
        return session.sendRequest((replyId, timestamp) => ({
            type: RPC.RPCMessage$Type.{{field.rpcGetSetCase | call}},
            value: new RPC.{{field.rpcGetSetMsg | call}}({
              replyId,
              timestamp,
              target: this.data.uuid,
              current: this.data.{{field.camelCase}},
              next: {{ field | fieldSetterValue }},
            })
        }));
      </method>
    </container>

    <render template="object-base" />
  </class>

  <render template="object-struct" *if="object.isRoot != true" />
</container>

<!-- ****************************** ENUMS ****************************** -->
<render *for="let enum in enums" template="voss-enum" />

<!-- ****************************** RPC ****************************** -->
namespace RPC {
}

<!-- ****************************** TEMPLATES ****************************** -->

<!-- This template implements serialization and equal -->
<template name="object-base">
  <!-- Size and Alignment -->
  <property
    name="maxElementAlignment"
    [default]="object.getMaxElementAlignment | call"
    static readonly />

  <property
    name="size"
    [default]="object.getSize | call"
    static readonly />
  
  <method name="equal">
    <parameter name="other" [type]="object.pascalCase" />
    return (
      <line
        *indent="1"
        *for="let field in object.getFields | call | sortForEqual"
        [value]="(field | equal) + ' &&'" />
      <line *indent="1" value='false' />
    );
  </method>

  <!-- The serializer -->
  <method name="serialize">
    <parameter name="builder" type="voss.Builder" />
    <container *for="let field in object.getFields | call">
      builder.{{field.type | encoder}}({{field.getOffset | call}}, this.data.{{field.camelCase}});
    </container>
  </method>

  <!-- The deserializer -->
  <method name="deserialize" static>
    <parameter name="reader" type="voss.Reader" />
    return new {{object.pascalCase}} ({
    <container *for="let field in object.getFields | call" *indent="1">
      <container *if="field.type.isPrimitive || field.type.isRootObject">
      {{field.camelCase}}: reader.{{field.type | encoder}}({{field.getOffset | call}}),
      </container>
      <container *if="field.type.isStructure">
        {{field.camelCase}}: reader.{{field.type | encoder}}({{field.getOffset | call}}, {{field.type.pascalCase}}.deserialize),
      </container>
      <container *if="field.type.isEnum">
        {{field.camelCase}}: reader.{{field.type | encoder}}({{field.getOffset | call}}, {{field.type.pascalCase}}$DeserializerMap),
      </container>
    </container>
    });
  </method>
</template>

<template name="object-getter">
    <!-- For Views we use fecthXXX -->
    <method
      *if="field.type.isRootObject"
      [name]="'fetch' + field.pascalCase">
      <parameter name="session" type="RPC.VossSession" />
      return session.fetchObjectByUUID(this.data.{{field.camelCase}});
    </method>

    <!-- Primitive/Struct types have getters -->
    <method
      *if="field.type.isRootObject != true"
      [name]="'get' + field.pascalCase">
      return this.data.{{field.camelCase}};
    </method>
</template>

<template name="object-struct">
  <class
    [name]="object.pascalCase"
    implement="voss.Struct"
    exported>

    constructor(protected data: {{ object.pascalCase }}$Data) {}

    <!-- Getter/Setters -->
    <container *for="let field in object.getFields | call">
      <render template="object-getter" />

      <!-- Root object type setter -->
      <method
        *if="field.type.isRootObject"
        [name]="'set' + field.pascalCase">
        <parameter name="value" [type]="field.type | type" />
        return new {{object.pascalCase}}({ ...this.data, {{field.camelCase}}: value.getUuid() });
      </method>

      <!-- Primitive/Struct type setter -->
      <method
        *if="field.type.isRootObject != true"
        [name]="'set' + field.pascalCase">
        <parameter name="value" [type]="field.type | type" />
        return new {{object.pascalCase}}({ ...this.data, {{field.camelCase}}: value });
      </method>
    </container>

    <render template="object-base" />
  </class>
</template>

<!-- ENUM TEMPLATE -->
<template name="voss-enum">
  <enum [name]="enum.pascalCase + '$Type'">
    <enum-member
      *for="let member in enum.getCases | call"
      [name]="member.pascalCase"
      [value]="member.value"
      exported/>
  </enum>

  export type {{ enum.pascalCase }} =
  <line
    *for="let member in enum.getCases | call"
    *indent="1"
    [value]="member | enumMember" />
  <line *indent="1" value=";" />

  export const {{ enum.pascalCase + '$DeserializerMap'  }}: {{ enum | enumDeserializerType }} = {
    <line
      *for="let member in enum.getCases | call"
      *indent="1"
      [value]="member | enumDeserializer" />
  }

</template>