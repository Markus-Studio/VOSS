<!-- ****************************** OBJECTS ****************************** -->
<container *for="let object in objects">
  <!-- Build the basic struct -->
  <struct
    [name]="object.pascalCase"
    pub
    derive-Clone
    derive-Debug
    derive-PartialEq>
    <struct-member
      *for="let field in object.getFields | call"
      [name]="field.snakeCase"
      [type]="field.type | type"
      pub />
  </struct>

  <render template="object-base-impl" />
</container>

<!-- ****************************** ENUMS ****************************** -->
<render *for="let enum in enums" template="voss-enum" />

<!-- ****************************** RPC ****************************** -->
<!-- Build RPC message data -->
<container *for="let message in rpc.getCases | call">
  <bind name="object" [value]="message.type.asObject | call" />
  <struct
    [name]="object.pascalCase"
    pub
    derive-Clone
    derive-Debug
    derive-PartialEq>
    <struct-member
      *for="let field in object.getFields | call"
      [name]="field.snakeCase"
      [type]="field.type | type"
      pub />
  </struct>

  <render template="object-base-impl" />
</container>

<!-- Enum for all of the RPC messages -->
<container>
  <bind name="enum" [value]="rpc" />
  <render template="voss-enum" />
</container>

<!-- ****************************** VCS ****************************** -->
<!-- VCS Actions -->
<container *for="let message in vcs.getCases | call">
  <bind name="object" [value]="message.type.asObject | call" />
  <struct
    [name]="object.pascalCase"
    pub
    derive-Clone
    derive-Debug
    derive-PartialEq>
    <struct-member
      *for="let field in object.getFields | call"
      [name]="field.snakeCase"
      [type]="field.type | type"
      pub />
  </struct>

  <render template="object-base-impl" />
</container>

<!-- Enum for all the actions -->
<container>
  <bind name="enum" [value]="vcs" />
  <render template="voss-enum" />
</container>

<!-- RootObject enum can be used for storing all of the objects in the program -->
<enum
  name="RooObject"
  pub
  derive-Clone
  derive-Debug
  derive-PartialEq>
  <enum-member
    *for="let obj in root"
    [name]="obj.pascalCase"
    [type]="'Box<' + obj.pascalCase + '>'" />
</enum>

// Handle RPC messages sent from users to the editor server.
use actix::*;
impl Handler&lt;rpc::EditorMessage&gt; for rpc::EditorServer {
  type Result = ();

  #[inline(always)]
  fn handle(&mut self, rpc::EditorMessage(user, msg): rpc::EditorMessage, _: &mut Context&lt;Self&gt;) -> Self::Result {
  }
}


<!-- ****************************** TEMPLATES ****************************** -->
<template name="object-base-impl">
  <impl name="voss_runtime::VossStruct" [for]="object.pascalCase">
    <method name="alignment_pow2" type="usize">
      <self-parameter ref />
      <line [value]="object | alignmentPow2" />
    </method>

    <method name="size" type="usize">
      <self-parameter ref />
      <line [value]="object.getSize | call" />
    </method>

    <method
      name="serialize"
      type="Result<(), voss_runtime::BuilderError>">
      <self-parameter ref />
      <parameter name="builder" type="voss_runtime::VossBuilder" ref mut />
      <line
        *for="let field in object.getFields | call"
        [value]="field | serialize"
        />
      Ok(())
    </method>
  </impl>

  <impl name="voss_runtime::FromReader" [for]="object.pascalCase">
    <method name="from_reader" type="Result<Self, voss_runtime::ReaderError>">
      <parameter name="reader" type="voss_runtime::VossReader" ref />
      Ok({{object.pascalCase}} {
        <line
          *indent="1"
          *for="let field in object.getFields | call"
          [value]="field | deserialize"
          />
      })
    </method>
  </impl>
</template>

<template name="voss-enum">
  <enum
    [name]="enum.pascalCase"
    pub
    derive-Clone
    derive-Debug
    derive-PartialEq>
    <enum-member
      *for="let case in enum.getCases | call"
      [name]="case.pascalCase"
      [type]="case.type.pascalCase" />
  </enum>

  <impl
    name="voss_runtime::VossEnum<'a>"
    [for]="enum.pascalCase"
    time="a">
    <method name="get_type" type="u32">
      <self-parameter ref />
      match &self {
        <container *indent="1" *for="let case in enum.getCases | call">
          {{enum.pascalCase}}::{{case.pascalCase}}(_) => {{case.value}},
        </container>
      }
    </method>

    <method name="get_value" type="&'a dyn voss_runtime::VossStruct">
      <self-parameter ref time="a" />
      match &self {
        <container *indent="1" *for="let case in enum.getCases | call">
          {{enum.pascalCase}}::{{case.pascalCase}}(v) => v,
        </container>
      }
    </method>
  </impl>

  <impl name="voss_runtime::FromReader" [for]="enum.pascalCase">
    <method name="from_reader" type="Result<Self, voss_runtime::ReaderError>">
      <parameter name="reader" type="voss_runtime::VossReader" ref />
      match reader.u32(0)? {
        <container *indent="1" *for="let case in enum.getCases | call">
          {{case.value}} => Ok({{enum.pascalCase}}::{{case.pascalCase}}(reader.object::&lt;{{case.type.pascalCase}}&gt;(4)?)),
        </container>
        _ => Err(voss_runtime::ReaderError::InvalidBuffer)
      }
    </method>
  </impl>
</template>